#
# `-rw-r--r-- nobody nobody /srv/tftp/netboot/grub/grub.cfg`
#
# This file can be automatically generated by grub-mkconfig using
# templates from /etc/grub.d and settings from /etc/default/grub,
#
# however,
#
# for practical purposes, it is edited manually.
#

### BEGIN /etc/grub.d/00_header ###

insmod part_gpt
insmod part_msdos
if [ -s $prefix/grubenv ]; then
  load_env
fi
if [ "${next_entry}" ] ; then
   set default="${next_entry}"
   set next_entry=
   save_env next_entry
   set boot_once=true
else
   set default='0'
fi

if [ x"${feature_menuentry_id}" = xy ]; then
  menuentry_id_option="--id"
else
  menuentry_id_option=""
fi

export menuentry_id_option

if [ "${prev_saved_entry}" ]; then
  set saved_entry="${prev_saved_entry}"
  save_env saved_entry
  set prev_saved_entry=
  save_env prev_saved_entry
  set boot_once=true
fi

function savedefault {
  if [ -z "${boot_once}" ]; then
    saved_entry="${chosen}"
    save_env saved_entry
  fi
}

function load_video {
  if [ x$feature_all_video_module = xy ]; then
    insmod all_video
  else
    insmod efi_gop
    insmod efi_uga
    insmod ieee1275_fb
    insmod vbe
    insmod vga
    insmod video_bochs
    insmod video_cirrus
  fi
}

if [ x$feature_default_font_path = xy ] ; then
   font=unicode
else
insmod ext2
if [ x$feature_platform_search_hint = xy ]; then
  search --no-floppy --fs-uuid --set=root  febf04f5-08d0-4446-b8e2-851791277f27
else
  search --no-floppy --fs-uuid --set=root febf04f5-08d0-4446-b8e2-851791277f27
fi
    font="/usr/share/grub/unicode.pf2"
fi

if loadfont $font ; then
  set gfxmode=auto
  load_video
  insmod gfxterm
  set locale_dir=$prefix/locale
  set lang=en_US
  insmod gettext
fi
terminal_input console
terminal_output gfxterm
if [ x$feature_timeout_style = xy ] ; then
  set timeout_style=menu
  set timeout=5
# Fallback normal timeout code in case the timeout_style feature is
# unavailable.
else
  set timeout=5
fi

### END /etc/grub.d/00_header ###

function init_netboot {
  load_video
  set gfxpayload=keep
  insmod gzio
  insmod ext2

  # insmod net_bootp # Not necessary.

  echo "INITATE NETBOOT $net_efinet0_boot_file"
  insmod net
  insmod tftp
  insmod efinet

  echo "NETWORK STATUS..."
  net_ls_cards
  net_ls_addr
  net_ls_routes

  echo "IP $net_default_ip MAC $net_default_mac SERVER $net_default_server"
  echo "IP $net_efinet0_ip MAC $net_efinet0_mac HOSTNAME $net_efinet0_hostname DOMAIN $net_efinet0_domain"
  echo "DHCP SERVER NAME $net_efinet0_dhcp_server_name NEXT SERVER $net_efinet0_next_server"
  echo "ROOT PATH $net_efinet0_rootpath EXTENSION PATH $net_efinet0_extensionpath"
  echo " "
  # echo "CONFIGURE NETWORK..."
  # If necessary, change settings.
  # set default_mac=<CLIENT MAC ADDRESS>
  # net_add_addr <CLIENT NETWORK DEVICE> <CLIENT MAC ADDRESS> <CLIENT IP>
  # net_add_route default 192.168.0.101 efinet0
  # net_add_dns 192.168.0.101

  # Any settings changed?
  echo "NETWORK CONFIGURATION..."
  net_ls_cards
  net_ls_addr
  net_ls_routes
  echo " "

  echo "IP $net_default_ip MAC $net_default_mac SERVER $net_default_server"
  echo "IP $net_efinet0_ip MAC $net_efinet0_mac HOSTNAME $net_efinet0_hostname DOMAIN $net_efinet0_domain"
  echo "DHCP SERVER NAME $net_efinet0_dhcp_server_name NEXT SERVER $net_efinet0_next_server"
  echo "ROOT PATH $net_efinet0_rootpath EXTENSION PATH $net_efinet0_extensionpath"
  echo " "
}

if [ "${net_default_ip}" = "192.168.1.102" ]; then
  menuentry 'netboot OS 0' --class arch --class gnu-linux --class gnu --class os $menuentry_id_option 'os0' {
    init_netboot

    echo "LOADING vmlinuz-linux..."
    #set root=(tftp,192.168.0.101)                # Not necessary?
    #set prefix=(tftp,192.168.0.101)/netboot/grub # Not necessary?
    #
    # https://www.kernel.org/doc/Documentation/filesystems/nfs/nfsroot.txt
    #
    # The NFS root directory for the OS.
    # nfsroot=<THE HOST IP>:/<OS DIRECTORY><,OPTIONS>
    # E.g. `fsroot=192.168.2.101:/archlinux,nfsvers=4,proto=tcp,port=0`.
    #
    # Debug options
    # Enables debugging messages to appear in the kernel log at boot time.
    # `debug ignore_loglevel nfsrootdebug`
    #
    # Disable or enable idmapping on boot.
    # `nfs.nfs4_disable_idmapping=<0, 1>`
    #
    # The path to the `vmlinuz-linux`. The direcory `archlinux` can be a symbolic link.
    # `linux <relative path, from TFTP root, to the vmlinuz>/archlinux/vmlinuz-linux`
    #
    linux netboot/os_0/vmlinuz-linux ip=:::::eth0:dhcp root=/dev/nfs rootfstype=nfs nfsroot=<SERVER IP>192.168.1.101:/os_0,nfsvers=4,minorversion=2 rw
    #
    # The IP parameter.
    #     client ip     : server ip     : gateway ip    : netmask       : hostname   : udev : dhcp
    # ip= 192.168.2.102 : 192.168.2.101 : 192.168.2.101 : 255.255.255.0 : clientname : eth0 : off
    # ip=:::::eth0:dhcp
    # ip=dhcp
    #
    #       pseudo-NFS-device               the host IP    the OS root directory
    #      ╭─┴────╮                        ╭─┴─────────╮  ╭─┴──╮
    # root=/dev/nfs rootfstype=nfs nfsroot=192.168.2.101:/client
    #
    echo "LOADING initramfs-linux.img..."
    # For diskless computer systems that uses Intel CPU.
    initrd /netboot/os_0/intel-ucode.img /netboot/os_0/initramfs-linux.nfs.img
  }
else
  menuentry 'netboot OS 1' --class arch --class gnu-linux --class gnu --class os $menuentry_id_option 'os1' {
    init_netboot

    echo "LOADING vmlinuz-linux..."
    linux netboot/os_1/vmlinuz-linux ip=:::::eth0:dhcp root=/dev/nfs rootfstype=nfs nfsroot=<SERVER IP>192.168.2.101:/os_1,nfsvers=4,minorversion=2 rw
    echo "LOADING initramfs-linux.img..."
    initrd /netboot/os_1/intel-ucode.img /netboot/os_1/initramfs-linux.nfs.img
  }
fi
