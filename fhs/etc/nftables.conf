#!/usr/bin/nft -f
# `-rw-r--r-- root root /etc/nftables.conf`

# ROUTER CONFIGURATION

# Required: IP forwarding
# systemd `sysctl net.ipv4.ip_forward=1`

# Important: Clear any previous ruleset.
flush ruleset

# TCP ports
define all_tcp   = 1-65535     #
define dns_tcp   = 53          # default 53
define http_tcp  = 80          # default 80
define https_tcp = 443         # default 443
define smtp_tcp  = 465         # default 465
define imap_tcp  = 993         # default 993
define nfs_tcp   = 2049        # default 2049
define ssh1_tcp  = 40001       # Server #1
define ssh2_tcp  = 40002       # Server #2
define ssh3_tcp  = 40003       # Server #3

# UDP ports
define all_udp   = 1-65535     #
define dns_udp   = 53          # default 53
define tftp_udp  = 69          # default 69
define tftpe_udp = 1024-65535  # ephemeral ports
define wg_udp    = 51820       # default 51820

# WAN
define wan_if       = enp0s0
define wan_ipv4     = 192.168.0.1

define all_ipv4     = 0.0.0.0-255.255.255.255
define server1_ipv4 = 101.0.0.1                       # Server #1
define server2_ipv4 = 101.0.0.2                       # Server #2
define server3_ipv4 = 101.0.0.3                       # Server #3
define imap1_ipv4   = 201.0.0.1                       # imap.server1.com
define imap2_ipv4   = 201.0.0.2                       # imap.server2.net
define imap3_ipv4   = 201.0.0.3                       # imap.server3.org
define smtp1_ipv4   = 201.0.0.4                       # smtp.server1.com
define smtp2_ipv4   = 201.0.0.5                       # smtp.server2.net
define smtp3_ipv4   = 201.0.0.6                       # smtp.server3.org

# LAN
define h0_ipv4  = 192.168.0.101

define h1_if    = enp1s0
define h1_ipv4  = 192.168.1.101
define c1_ipv4  = 192.168.1.102

define h2_if    = enp2s0
define h2_ipv4  = 192.168.2.101
define c2_ipv4  = 192.168.2.102

define h3_if    = enp3s0
define h3_ipv4  = 192.168.3.101
define c3_ipv4  = 192.168.3.102

define lan_if   = { $h1_if, $h2_if, $h3_if, }
define lan_ipv4 = {
  $wan_ipv4, $h0_ipv4,
  $c1_ipv4,  $h1_ipv4,
  $c2_ipv4,  $h2_ipv4,
  $c3_ipv4,  $h3_ipv4,
}

# VPN
define vpn_if   = vpn_interface
define vpn_ipv4 = 10.0.0.1

# GATEWAY
# Manually assign the appropriate gateway
define gw_ipv4 = $vpn_ipv4

# DNS
define dns1_ipv4 = 1.1.1.1
define dns2_ipv4 = 1.0.0.1

# HOST INBOUND PREROUTE
# Traffic to specific interface from specific IP to specific IP port.
define preroute_iif_sipv4_dipv4_dtcp = {
  $h1_if . $c1_ipv4 . $dns1_ipv4    . $dns_tcp,
  $h1_if . $c1_ipv4 . $dns2_ipv4    . $dns_tcp,
  $h2_if . $c2_ipv4 . $dns1_ipv4    . $dns_tcp,
  $h2_if . $c2_ipv4 . $dns2_ipv4    . $dns_tcp,
  $h3_if . $c3_ipv4 . $dns1_ipv4    . $dns_tcp,
  $h3_if . $c3_ipv4 . $dns2_ipv4    . $dns_tcp,
  $h1_if . $c1_ipv4 . $all_ipv4     . $http_tcp,
  $h2_if . $c2_ipv4 . $all_ipv4     . $http_tcp,
  $h3_if . $c3_ipv4 . $all_ipv4     . $http_tcp,
  $h1_if . $c1_ipv4 . $all_ipv4     . $https_tcp,
  $h2_if . $c2_ipv4 . $all_ipv4     . $https_tcp,
  $h3_if . $c3_ipv4 . $all_ipv4     . $https_tcp,
  $h1_if . $c1_ipv4 . $h1_ipv4      . $nfs_tcp,
  $h2_if . $c2_ipv4 . $h2_ipv4      . $nfs_tcp,
  $h3_if . $c3_ipv4 . $h3_ipv4      . $nfs_tcp,
  $h1_if . $c1_ipv4 . $server1_ipv4 . $ssh1_tcp,
  $h2_if . $c2_ipv4 . $server2_ipv4 . $ssh2_tcp,
  $h3_if . $c3_ipv4 . $server3_ipv4 . $ssh3_tcp,
  $h1_if . $c1_ipv4 . $imap1_ipv4   . $imap_tcp,
  $h2_if . $c2_ipv4 . $imap2_ipv4   . $imap_tcp,
  $h3_if . $c3_ipv4 . $imap3_ipv4   . $imap_tcp,
  $h1_if . $c1_ipv4 . $smtp1_ipv4   . $smtp_tcp,
  $h3_if . $c2_ipv4 . $smtp2_ipv4   . $smtp_tcp,
  $h3_if . $c3_ipv4 . $smtp3_ipv4   . $smtp_tcp,
}
define preroute_iif_sipv4_dipv4_dudp = {
  $h1_if . $c1_ipv4 . $gw_ipv4   . $dns_udp,
  $h2_if . $c2_ipv4 . $gw_ipv4   . $dns_udp,
  $h3_if . $c3_ipv4 . $gw_ipv4   . $dns_udp,
  $h1_if . $c1_ipv4 . $dns1_ipv4 . $dns_udp,
  $h1_if . $c1_ipv4 . $dns2_ipv4 . $dns_udp,
  $h2_if . $c2_ipv4 . $dns1_ipv4 . $dns_udp,
  $h2_if . $c2_ipv4 . $dns2_ipv4 . $dns_udp,
  $h3_if . $c3_ipv4 . $dns1_ipv4 . $dns_udp,
  $h3_if . $c3_ipv4 . $dns2_ipv4 . $dns_udp,
  $h1_if . $c1_ipv4 . $h1_ipv4   . $tftp_udp,
  $h2_if . $c2_ipv4 . $h2_ipv4   . $tftp_udp,
  $h3_if . $c3_ipv4 . $h3_ipv4   . $tftp_udp,
}
# HOST INBOUND INPUT FROM LAN
# Traffic to specific interface from specific IP to specific IP port.
define input_iif_sipv4_dipv4_dtcp = {
  $h1_if . $c1_ipv4 . $dns1_ipv4    . $dns_tcp,
  $h1_if . $c1_ipv4 . $dns2_ipv4    . $dns_tcp,
  $h2_if . $c2_ipv4 . $dns1_ipv4    . $dns_tcp,
  $h2_if . $c2_ipv4 . $dns2_ipv4    . $dns_tcp,
  $h3_if . $c3_ipv4 . $dns1_ipv4    . $dns_tcp,
  $h3_if . $c3_ipv4 . $dns2_ipv4    . $dns_tcp,
  $h1_if . $c1_ipv4 . $h1_ipv4      . $nfs_tcp,
  $h2_if . $c2_ipv4 . $h2_ipv4      . $nfs_tcp,
  $h3_if . $c3_ipv4 . $h3_ipv4      . $nfs_tcp,
  $h1_if . $c1_ipv4 . $server1_ipv4 . $ssh1_tcp,
  $h2_if . $c2_ipv4 . $server2_ipv4 . $ssh2_tcp,
  $h3_if . $c3_ipv4 . $server3_ipv4 . $ssh3_tcp,
}
define input_iif_sipv4_dipv4_dudp = {
  $h1_if . $c1_ipv4 . $dns1_ipv4 . $dns_udp,
  $h1_if . $c1_ipv4 . $dns2_ipv4 . $dns_udp,
  $h2_if . $c2_ipv4 . $dns1_ipv4 . $dns_udp,
  $h2_if . $c2_ipv4 . $dns2_ipv4 . $dns_udp,
  $h3_if . $c3_ipv4 . $dns1_ipv4 . $dns_udp,
  $h3_if . $c3_ipv4 . $dns2_ipv4 . $dns_udp,
  $h1_if . $c1_ipv4 . $h1_ipv4   . $tftp_udp,
  $h2_if . $c2_ipv4 . $h2_ipv4   . $tftp_udp,
  $h3_if . $c3_ipv4 . $h3_ipv4   . $tftp_udp,
  $h1_if . $c1_ipv4 . $h1_ipv4   . $tftpe_udp,
  $h2_if . $c2_ipv4 . $h2_ipv4   . $tftpe_udp,
  $h3_if . $c3_ipv4 . $h3_ipv4   . $tftpe_udp,
}
# HOST INBOUND INPUT FROM WAN, VPN
# Traffic to specific interface from specific IP port to specific IP,
# only if initiated by client.
define input_iif_stcp_sipv4_dipv4 = {
  $vpn_if . $dns_tcp   . $all_ipv4 . $gw_ipv4,
  $wan_if . $dns_tcp   . $all_ipv4 . $gw_ipv4,
  $vpn_if . $http_tcp  . $all_ipv4 . $gw_ipv4,
  $wan_if . $http_tcp  . $all_ipv4 . $gw_ipv4,
  $vpn_if . $https_tcp . $all_ipv4 . $gw_ipv4,
  $wan_if . $https_tcp . $all_ipv4 . $gw_ipv4,
  $wan_if . $http_tcp  . $all_ipv4 . $h0_ipv4,
  $wan_if . $https_tcp . $all_ipv4 . $h0_ipv4,
}
define input_iif_sudp_sipv4_dipv4 = {
  $vpn_if . $dns_udp   . $all_ipv4 . $gw_ipv4,
  $wan_if . $dns_udp   . $all_ipv4 . $gw_ipv4,
  $vpn_if . $dns_udp   . $all_ipv4 . $h0_ipv4,
  $wan_if . $dns_udp   . $all_ipv4 . $h0_ipv4,
}
# HOST OUTBOUND OUTPUT TO WAN, VPN
# Traffic from specific interface and IP to specific IP port.
define output_oif_sipv4_dipv4_dtcp = {
  $vpn_if . $gw_ipv4 . $all_ipv4 . $dns_tcp,
  $wan_if . $gw_ipv4 . $all_ipv4 . $dns_tcp,
  $vpn_if . $gw_ipv4 . $all_ipv4 . $http_tcp,
  $wan_if . $gw_ipv4 . $all_ipv4 . $http_tcp,
  $vpn_if . $gw_ipv4 . $all_ipv4 . $https_tcp,
  $wan_if . $gw_ipv4 . $all_ipv4 . $https_tcp,
  $vpn_if . $h0_ipv4 . $all_ipv4 . $http_tcp,
  $wan_if . $h0_ipv4 . $all_ipv4 . $http_tcp,
  $vpn_if . $h0_ipv4 . $all_ipv4 . $https_tcp,
  $wan_if . $h0_ipv4 . $all_ipv4 . $https_tcp,
}
define output_oif_sipv4_dipv4_dudp = {
  $vpn_if . $gw_ipv4 . $all_ipv4 . $dns_udp,
  $wan_if . $gw_ipv4 . $all_ipv4 . $dns_udp,
  $vpn_if . $h0_ipv4 . $all_ipv4 . $dns_udp,
  $wan_if . $h0_ipv4 . $all_ipv4 . $dns_udp,
  $vpn_if . $h0_ipv4 . $all_ipv4 . $wg_udp,
  $wan_if . $h0_ipv4 . $all_ipv4 . $wg_udp,
}

# Netfilter hook order:
# ingress -> prerouting -> routing decision -> forward -+
#                                 |                     |
#                                 V                     |
#          local process <- inbound traffic             +--> postrouting
#                |                                      |
#                V                                      |
#       routing decision -> outbound traffic -----------+
#
# The following diagram from (2021-12-17)
# https://paulgorman.org/technical/linux-nftables.txt.html
#
#                           ◂            ◂             ◂    (For example,
#                         ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓ ↙  loopback traffic)
#                         ┃                             ┃
#                        ▾┃  INPUT ○╮       ╭○ OUTPUT   ┃▴
#                         ┃   hook  │       │  hook    ┏┻┓ ▸   ▸   ▸  outbound
#                    ┏━━━━┻━━━━━━━━━┿━━┓ ┏━━┿━━━━━━━━━━┫╳┣━━━━━┳━━┿━━ traffic ▸
#                    ┃ ▸    ▸      ▸   ┃ ┃     ▸     ▸ ┗┯┛     ┃▴ │
#                    ┃                ▾┃ ┃▴             │      ┃  │
#                    ┃▴            local system         │      ┃  ╰○ POSTROUTING
# inbound      ▸    ┏┻┓                                 │      ┃     hook
# traffic ▸ ━━━━━┿━━┫╳┠── routing decision    routing decision ┃
#                │  ┗┳┛                                        ┃
#    PREROUTING ○╯  ▾┃                                         ┃▴
#          hook      ┗━━━━━━━━━━━━━┿━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
#                      ▸         ▸ │           ▸           ▸
#                                  ╰○ FORWARD hook
#

# The main rule for all chains with exception for "postrouting" is to drop
# everything unless explicitly approved. At the stage of "postrouting" all
# relevant filters should have been applied and the traffic is only to be
# "masqueraded".
# * Nmap Network Scanning Chapter 15. Nmap Reference Guide [Port Scanning Basics](https://nmap.org/book/man-port-scanning-basics.html)
# > By default, drop all traffic unless it meets a filter criteria specified by
# > the rules that follow below. The alternative is to `policy accept` and
# > reject everything that does not pass with the last rule `reject`. The former
# > method is preferred because it indicates that any unqualified package has
# > been "filtered". Packages that are "filtered" provide little information to
# > a potential attacker on what has happened.

table inet router {
  chain prerouting {
    #log prefix "[nftables] Prerouting: " flags all counter

    type nat hook prerouting priority 0; policy drop

    ip protocol icmp   limit rate 4/second ct state new accept
    ip6 nexthdr icmpv6 limit rate 4/second ct state new accept
    ip protocol igmp   limit rate 4/second ct state new accept

    # At this stage the input traffic is not sent to Wireguard interface.
    # Therefore, the input traffic can still be filtered based on specific
    # IP ports.
    iifname . ip saddr . ip daddr . tcp dport $preroute_iif_sipv4_dipv4_dtcp ct state {established, related, new} accept
    iifname . ip saddr . ip daddr . udp dport $preroute_iif_sipv4_dipv4_dudp ct state {established, related, new} accept

    # Allow all types of connections from interface on any LAN port to any LAN port
    iifname $lan_if ip saddr $lan_ipv4 ip daddr $lan_ipv4 ct state {established, related, new} accept
    iifname $lan_if ip saddr $lan_ipv4 ip daddr $lan_ipv4 ct state {established, related, new} accept

    #log prefix "[nftables] Prerouting Denied: " flags all counter
  }
  chain postrouting {
    #log prefix "[nftables] Postrouting: " flags all counter

    type nat hook postrouting priority 100;

    # Masquerade traffic
    # All traffic from `iifname` are shown as coming from `oifname`.

    # LAN to LAN traffic through WAN
    iifname $lan_if oifname $wan_if ip saddr $lan_ipv4 ip daddr $lan_ipv4 masquerade

    # LAN to VPN traffic
    iifname $lan_if oifname $vpn_if masquerade

    # LAN to WAN traffic
    # The LAN to WAN traffic only works if the VPN is down. However, disable it
    # in order to prevent further traffic on VPN failure. That is, by disabling
    # the WAN it should function as a "kill switch".
    #iifname $lan_if oifname $wan_if masquerade
  }
}

table inet filter {
  # Incoming requests to host from unknown connections.
  chain inbound {
    #log prefix "[nftables] Inbound: " flags all counter

    type filter hook input priority 0; policy drop

    # Early drop of invalid connections
    ct state invalid drop

    # Allow traffic from loopback interface only if from localhost
    iifname "lo" ip  saddr 127.0.0.0/8 ct state {established, related, new} accept
    iifname "lo" ip6 saddr ::1/128     ct state {established, related, new} accept

    # Allow all ICMP (ping) and IGMP (multicast) traffic
    # * The limit rate is intended to prevent some types of flood attacks.
    # * `ipv6-icmp` and `icmpv6` are aliases.
    ip protocol icmp   limit rate 4/second ct state {established, related} accept
    ip6 nexthdr icmpv6 limit rate 4/second ct state {established, related} accept
    ip protocol igmp   limit rate 4/second ct state {established, related} accept

    # Allow traffic to WAN only from Wireguard port if initiated by client
    # The source WG IP:UDP to destination WG IP:UDP captures all traffic.
    #iifname $wan_if udp sport $wg_udp ct state {established, related} log prefix "[nftables] Inbound WAN-VPN: " flags all counter accept
    iifname $wan_if udp sport $wg_udp ct state {established, related} accept

    # Allow traffic to interface from IP port to IP on any port only if initiated by client
    iifname . tcp sport . ip saddr . ip daddr $input_iif_stcp_sipv4_dipv4 ct state {established, related} accept
    iifname . udp sport . ip saddr . ip daddr $input_iif_sudp_sipv4_dipv4 ct state {established, related} accept

    # Allow all types of connections from specific IP to specific IP port
    iifname . ip saddr . ip daddr . tcp dport $input_iif_sipv4_dipv4_dtcp ct state {established, related, new} accept
    iifname . ip saddr . ip daddr . udp dport $input_iif_sipv4_dipv4_dudp ct state {established, related, new} accept

    #log prefix "[nftables] Inbound Denied: " flags all counter
  }

  chain forward {
    #log prefix "[nftables] Forward: " flags all counter

    type filter hook forward priority 0; policy drop

    # Allow established and, or related connections
    ct state {established, related} accept

    # Early drop of invalid connections
    ct state invalid drop

    # Allow packages from LAN to LAN, if either initiated the connection
    iifname $lan_if oifname $lan_if accept

    # Allow packages from LAN to WAN, and from WAN to LAN if LAN initiated the connection
    iifname $lan_if oifname $wan_if accept

    # Allow packages from LAN to VPN, and from VPN to LAN if LAN initiated the connection
    iifname $lan_if oifname $vpn_if accept

    #log prefix "[nftables] Forward Denied: " flags all counter drop
  }

  # Outgoing connections from host.
  chain outbound {
    #log prefix "[nftables] Outbound: " flags all counter

    type filter hook output priority 100; policy drop

    # Early drop of invalid connections
    ct state invalid drop

    # Allow traffic from loopback interface only if to localhost
    oifname "lo" ip daddr 127.0.0.0/8 accept
    oifname "lo" ip6 daddr ::1/128 accept

    # Allow all ICMP (ping) and IGMP (multicast) traffic
    ip protocol icmp accept
    ip6 nexthdr icmpv6 accept
    ip protocol igmp accept

    # The meta skuid and skgid only applies to traffic from the host?
    #meta skgid {users,root} oifname . ip saddr . ip daddr . tcp dport $output_oif_sipv4_dipv4_dtcp ct state {established, related, new} accept
    #meta skgid {users,root} oifname . ip saddr . ip daddr . udp dport $output_oif_sipv4_dipv4_dudp ct state {established, related, new} accept

    # Allow all types of connections from interface IP to IP port
    # Traffic before being masqueraded.
    oifname . ip saddr . ip daddr . tcp dport $output_oif_sipv4_dipv4_dtcp ct state {established, related, new} accept
    oifname . ip saddr . ip daddr . udp dport $output_oif_sipv4_dipv4_dudp ct state {established, related, new} accept

    # Allow all types of connections from interface on any LAN port to any LAN port
    oifname $lan_if ip saddr $lan_ipv4 ip daddr $lan_ipv4 ct state {established, related, new} accept
    oifname $lan_if ip saddr $lan_ipv4 ip daddr $lan_ipv4 ct state {established, related, new} accept

    #log prefix "[nftables] Outbound Denied: " flags all counter
  }
}

