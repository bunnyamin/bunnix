#!/usr/bin/nft -f
# `-rw-r--r-- root root /etc/nftables.conf`

# ROUTER CONFIGURATION

# Required: IP forwarding
# systemd `sysctl net.ipv4.ip_forward=1`

# Important: Clear any previous ruleset.
flush ruleset

# TCP ports
# 22          SSH   (default)
# 53          DNS   (default)
# 80          HTTP  (default)
# 443         HTTPS (default)
# 2049        NFS   (default)

# UDP ports
# 53          DNS   (default)
# 69          TFTP  (default)
# 1024-65535  TFTP  (ephemeral ports)
# 51820       WG    (default)

# LAN
define lan_if   = { "enp1s0", "enp2s0", "enp3s0", ... }
define lan_ipv4 = { 192.168.0.101, 192.168.1.101, 192.168.1.102, ... }

# Host WAN
define wan_if   = enp0s0
define wan_ipv4 = 192.168.0.1

# Host VPN
define vpn_if   = "vpn interface"
define vpn_ipv4 = 10.1.0.1/32

# HOST INBOUND
# Allow new connections from any IP to host on TCP ports
define hin_tcp = {
  http, https,
}

# Allow new connections from any IP to host on UDP ports
#define hin_udp = { }

# Allow new connections from specific LAN IP to host on TCP ports
define hin_specific_tcp_lan_ipv4 = {
  nfs . 192.168.1.102,
  nfs . 192.168.2.102,
}

# Allow new connections from specific LAN IP to host on UDP ports
define hin_specific_udp_lan_ipv4 = {
  tftp . 192.168.1.102,
  tftp . 192.168.2.102,
}

# Allow new connections from specific WAN IP to host on TCP ports
#define hin_specific_tcp_wan_ipv4 = { }

# Allow new connections from specific WAN IP to host on UDP ports
#define hin_specific_udp_wan_ipv4 = { }

# HOST OUTBOUND
# Allow new connections from host to any IP on TCP ports
define hou_tcp = {
  53,
  http,
  https,
}

# Allow new connections from host to any IP on UDP ports
define hou_udp = {
  53,
  51820,
}

# Allow new connections from host to specific LAN IP on TCP ports
define hou_specific_tcp_lan_ipv4 = {
  nfs . 192.168.1.102,
  nfs . 192.168.2.102,
}

# Allow new connections from host to specific LAN IP on UDP ports
define hou_specific_udp_lan_ipv4 = {
  1024-65535 . 192.168.1.102,
  1024-65535 . 192.168.2.102,
}

# Allow new connections from host to specific WAN IP on TCP ports
#define hou_specific_tcp_wan_ipv4 = { }

# Allow new connections from host to specific WAN IP on UDP ports
#define hou_specific_udp_wan_ipv4 = { }

# Netfilter hook order:
# ingress -> prerouting -> routing decision -> forward -+
#                                 |                     |
#                                 V                     |
#          local process <- inbound traffic             +--> postrouting
#                |                                      |
#                V                                      |
#       routing decision -> outbound traffic -----------+
#
# The following diagram from (2021-12-17)
# https://paulgorman.org/technical/linux-nftables.txt.html
#
#                           ◂            ◂             ◂    (For example,
#                         ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓ ↙  loopback traffic)
#                         ┃                             ┃
#                        ▾┃  INPUT ○╮       ╭○ OUTPUT   ┃▴
#                         ┃   hook  │       │  hook    ┏┻┓ ▸   ▸   ▸  outbound
#                    ┏━━━━┻━━━━━━━━━┿━━┓ ┏━━┿━━━━━━━━━━┫╳┣━━━━━┳━━┿━━ traffic ▸
#                    ┃ ▸    ▸      ▸   ┃ ┃     ▸     ▸ ┗┯┛     ┃▴ │
#                    ┃                ▾┃ ┃▴             │      ┃  │
#                    ┃▴            local system         │      ┃  ╰○ POSTROUTING
# inbound      ▸    ┏┻┓                                 │      ┃     hook
# traffic ▸ ━━━━━┿━━┫╳┠── routing decision    routing decision ┃
#                │  ┗┳┛                                        ┃
#    PREROUTING ○╯  ▾┃                                         ┃▴
#          hook      ┗━━━━━━━━━━━━━┿━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
#                      ▸         ▸ │           ▸           ▸
#                                  ╰○ FORWARD hook
#

table inet router {
  chain prerouting {
    type nat hook prerouting priority 0;
  }
  chain postrouting {
    type nat hook postrouting priority 100;

    # Masquerade traffic
    # All traffic from `iifname` are shown as coming from `oifname`.

    # LAN to LAN traffic through WAN
    iifname $lan_if oifname $wan_if ip saddr $lan_ipv4 ip daddr $lan_ipv4 masquerade

    # LAN to VPN traffic
    iifname $lan_if oifname $vpn_if masquerade

    # LAN to WAN traffic
    # Only works if the VPN is down. However, disable WAN traffic in order to
    # avoid to use it on VPN failure. That is, by disabling the WAN traffic,
    # it should function as a "killswitch".
    #iifname $lan_if oifname $wan_if masquerade
  }
}

table inet filter {
  # Incoming requests to host from unknown connections.
  chain inbound {
    type filter hook input priority 0
    # Reject everything unless explicitly approved
    # * Nmap Network Scanning Chapter 15. Nmap Reference Guide [Port Scanning Basics](https://nmap.org/book/man-port-scanning-basics.html)
    # By default, drop all traffic unless it meets a filter criteria specified
    # by the rules that follow below. The alternative is to `policy accept` and
    # reject everything that does not pass with the last rule `reject`. The
    # former method is preferred because it indicates that any unqualified
    # package has been "filtered". Packages that are "filtered" provide little
    # information to a potential attacker on what has happened.
    policy drop

    # Allow established and, or related connections
    ct state {established, related} accept

    # Early drop of invalid connections
    ct state invalid drop

    # Allow traffic from loopback interface only if from localhost
    iifname "lo" ip saddr 127.0.0.0/8 accept
    iifname "lo" ip6 saddr ::1/128 accept

    # Allow ICMP (ping) and IGMP (multicast) traffic
    # * The limit rate is intended to prevent some types of flood attacks.
    # * `ipv6-icmp` and `icmpv6` are aliases.
    ip protocol icmp limit rate 4/second accept
    ip6 nexthdr icmpv6 limit rate 4/second accept
    ip protocol igmp limit rate 4/second accept

    # Allow connections on ports TCP and UDP from any IP
    # * The limit rate is intended to prevent brute force attacks.
    tcp dport $hin_tcp limit rate 15/minute accept
    #udp dport $hin_udp limit rate 15/minute accept

    # Allow new connections to host on specific ports from specific LAN IP
    tcp dport . ip saddr $hin_specific_tcp_lan_ipv4 accept
    udp dport . ip saddr $hin_specific_udp_lan_ipv4 accept

    # Allow new connections to host on specific ports from specific WAN IP
    # * The limit rate is intended to prevent brute force attacks.
    #tcp dport . ip saddr $hin_specific_tcp_wan_ipv4 limit rate 15/minute accept
    #udp dport . ip saddr $hin_specific_udp_wan_ipv4 limit rate 15/minute accept

    # Log denied inbound traffic
    #log prefix "[nftables] Inbound Denied: " flags all counter drop
  }

  chain forward {
    type filter hook forward priority 0
    # Reject everything unless explicitly approved
    policy drop

    # Allow established and, or related connections
    ct state {established, related} accept

    # Early drop of invalid connections
    ct state invalid drop

    # Allow packages from LAN to LAN, if either initiated the connection.
    iifname $lan_if oifname $lan_if accept

    # Allow packages from LAN to WAN, and from WAN to LAN if LAN initiated the
    # connection.
    iifname $lan_if oifname $wan_if accept

    # Allow packages from LAN to VPN, and from VPN to LAN if LAN initiated the
    # connection.
    iifname $lan_if oifname $vpn_if accept

    # Log denied forwards
    #log prefix "[nftables] Forward Denied: " flags all counter drop
  }

  # Outgoing connections from host.
  chain outbound {
    type filter hook output priority 0
    # Reject everything unless explicitly approved
    policy drop

    # Allow established and, or related connections
    ct state {established, related} accept

    # Early drop of invalid connections
    ct state invalid drop

    # Allow traffic to loopback interface only if to localhost
    oifname "lo" ip daddr 127.0.0.0/8 accept
    oifname "lo" ip6 daddr ::1/128 accept

    # Allow all ICMP (ping) and IGMP (multicast) traffic
    ip protocol icmp accept
    ip6 nexthdr icmpv6 accept
    ip protocol igmp accept

    # Allow new connection to any IP on ports TCP and UDP
    tcp dport $hou_tcp accept
    udp dport $hou_udp accept

    # Allow new connections to specific LAN IP on specific ports
    tcp dport . ip daddr $hou_specific_tcp_lan_ipv4 accept
    udp dport . ip daddr $hou_specific_udp_lan_ipv4 accept

    # Allow new connections to specific WAN IP on specific ports
    #tcp dport . ip daddr $hou_specific_tcp_wan_ipv4 accept
    #udp dport . ip daddr $hou_specific_udp_wan_ipv4 accept

    #log prefix "[nftables] Outbound Denied: " flags all counter drop
  }
}

